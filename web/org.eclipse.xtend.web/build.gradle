plugins {
	id 'osgi'
	id 'war'
	id 'org.xtext.xtend' version '1.0.4'
}

repositories {
     mavenLocal()
     jcenter()
     // maven { url "http://repo.maven.apache.org/maven2" }
}

dependencies {
//	compile project(':plugins:org.eclipse.xtend.ide.common')
//	compile project(":web:org.eclipse.xtext.xbase.web")
//	compile project(":web:org.eclipse.xtext.web.servlet")

// To try out just this project, without workspace dependencies to other bleeding edge modules from core Xtext: 
	compile "org.eclipse.xtend:org.eclipse.xtend.ide.common:2.9.2"
	compile "org.eclipse.xtext:org.eclipse.xtext.xbase.web:2.9.2"
	compile "org.eclipse.xtext:org.eclipse.xtext.web.servlet:2.9.2"

	compile "org.webjars:requirejs:2.1.20"
	compile "org.webjars:jquery:2.1.4"
	compile "org.webjars:ace:1.2.0"
	
	providedCompile "org.eclipse.jetty:jetty-annotations:9.2.11.v20150529"
	providedCompile "org.slf4j:slf4j-simple:1.7.12"
	
	compile "commons-io:commons-io:2.4"
	
	// This dependency (HoTea) is *ONLY* used here for & to avoid copy/pasting it's EclipseClasspathFileReader util class (NOT actually HoTea.. yet?)
	compile 'ch.vorburger:hotea:1.0.0-SNAPSHOT'
}

task jettyRun(type:JavaExec) {
	dependsOn(sourceSets.main.runtimeClasspath)
	classpath = sourceSets.main.runtimeClasspath.filter{it.exists()}
	main = 'org.eclipse.xtend.web.ServerLauncher'
	standardInput = System.in
	group = 'run'
	description = 'Starts an example Jetty server with your language'
}

jar.manifest {
	name 'Xtend Web Integration'
	vendor 'Eclipse Xtext'
}

